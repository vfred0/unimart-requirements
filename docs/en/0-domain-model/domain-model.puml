@startuml domain-model

!define ZERO_TO_ONE 0..1
!define ZERO_TO_MANY 0..N
!define ONE_TO_ONE 1..1
!define ONE_TO_TWO 1..2
!define ONE_TO_MANY 1..N
!define EMPTY ""

!define compositionRelation(all, part, cardinality) all *--> part: cardinality

!define associationRelation(client, server, cardinality) client --> server: cardinality

!define aggregationRelation(whole, part, cardinality) whole o--> part: cardinality

!define useRelation(user, used, cardinality) user ..> used: cardinality

!define inheritanceRelation(child, parent, cardinality) child <|-- parent: cardinality

enum Category {
    + TEXT_BOOKS_EDUCATIONAL_MATERIAL
    + OFFICE_SUPPLIES
    + ELECTRONICS
    + FURNITURE_AND_DECORATION
    + CLOTHING
    + LABORATORY_MATERIAL
    + MUSICAL_INSTRUMENTS
    + SPORTING_GOODS
    + ARTS_HANDICRAFTS
    + TOYS_GAMES
}

enum State {
    + NEW
    + SEMINEW
    + USED
    + LOW_QUALITY
}

enum TypeArticle {
    + PUBLISHED
    + PROPOSED
    
}
compositionRelation(Unimart, User, ONE_TO_MANY)
compositionRelation(Unimart, Article, ONE_TO_MANY)
aggregationRelation(User, Rating,  ZERO_TO_MANY)
aggregationRelation(User, Article, ZERO_TO_MANY)
aggregationRelation(User, Publication, ZERO_TO_MANY)
aggregationRelation(User, ProposedArticle, ZERO_TO_MANY)
associationRelation(Exchange, User, ONE_TO_MANY)
useRelation(Exchange, Rating, ONE_TO_ONE)
useRelation(Rating, Article, ONE_TO_ONE)
compositionRelation(Article, Category, ONE_TO_TWO)
compositionRelation(Article, State, ONE_TO_ONE)
compositionRelation(Article, TypeArticle, ONE_TO_ONE)
inheritanceRelation(Article, ProposedArticle, EMPTY)
aggregationRelation(Publication, ProposedArticle, ZERO_TO_MANY)
compositionRelation(Publication, Article, ONE_TO_ONE)
@enduml